@page "/"
@using System.Drawing

@inject ILogger<Index> Logger

<div class="container">
    <div class="container__inner">
        <div class="form">
            <p class="form-title">X:</p><p></p>
            <p class="input-title">Количество клеток по X:</p> <input type="number" class="input" @bind=xAxis.CellCount />
            <p class="input-title">Начало по X: </p><input type="number" class="input" @bind=xAxis.Begin />
            <p class="input-title">Конец по X: </p><input type="number" class="input" @bind=xAxis.End />
        </div>

        <div class="form">
            <p class="form-title">Z:</p><p></p>
            <p class="input-title">Количество клеток по Z:</p> <input type="number" class="input" @bind=zAxis.CellCount />
            <p class="input-title">Начало по Z: </p><input type="number" class="input" @bind=zAxis.Begin />
            <p class="input-title">Конец по Z: </p><input type="number" class="input" @bind=zAxis.End />
        </div>
    </div>

   @* <div class="table-row">
        @for (int i = 1; i < xAxis.CellCount + 2; i++)
        {
            <div class="table-row__number">@i</div>
        }
    </div>*@

    <div class="buttons-line">
        <button class="button" @onclick=OnBuildGrid>Построить сетку</button>
        <button class="button" @onclick=OnResetGrid>Сбросить сетку</button>
        <button class="button" @onclick=@(async () => await OnCalculate())>Посчитать задачу</button>
    </div>

    @if (currentGrid != null)
    {
        <div class="buttons-line buttons-line--icons">
            <button class="button" @onclick=OnBack>@('<')</button>
            <button class="button" @onclick=OnForward>@('>')</button>
        </div>


        <div class="table" style=@($"grid-template-columns: repeat({xAxis.CellCount}, 1fr);")>

            @for (int i = 0; i < currentGrid.Properties.Length; i++)
            {
                var index = i;
                Color color = colorScale.GetColor(currentGrid.Properties[index]);
                <input class="input input--table" value=@($"{currentGrid.Properties[index]:G4}") @onchange=@((ChangeEventArgs args) => OnGridCellChange(args, index)) style=@($"background: rgba({color.R}, {color.G}, {color.B}, 0.5);")>
            }
        </div>
    }
</div>